1. MVC(Model View Controller) 방식
- 백엔드가 html을 생성하기 위한 템플릿(thymeleaf, jsp)까지 가지고 있다
- 템플릿은 html과 자바코드를 함께 작성하는 것
- 템플릿은 서버쪽에서 실행되어 최종적으로 html 생성 -> 사용자에게 보내준다
  서버쪽에서 실행된다고 해서 (Server Side 기술)

2. HTTP 상태 코드
200 : 성공. 서버에서 오류가 발생하지 않음
400 : 서버에서 수신거부
403 : 권한없음
404 : not found
405 : 메소드 오류
500 : 서버측 처리 중 오류 발생

3. REST 방식
- 프론트와 백은 계약 관계 
  <form>은 사용하지 않는다 -> form은 MVC(form은 submit하면 화면이동이 발생)
  반드시 요청 형식을 일치시켜야한다
- 요청 형식
  form-data : 파일 업로드가 가능
  url-encoded : irum=홍길동&nai=20
  json : 자바스크립트에서 객체를 문자열로 나타내는 방법 -> 사실상 웹표준으로 널리 사용
      {
        "irum":"홍길동",
        "nai":"20"
      }

4. REST 응답
- 처음에는 응답도 json 형식으로 데이터만 보냈다
- 프론트 쪽에서 응답 메시지만 보면 이게 성공한 결과인지, 아니면 실패한 메시지인지 알아보기 어렵더라
- 그래서 응답할 때 상태코드를 추가해서 보내자
  성공적인 결과라면 상태코드 200 으로, 바람직하지 않은 결과면 200이 아닌 값
  프론트에서는
  try {
    200인 경우
  } catch(err) {
    200이 아닌 경우
  }